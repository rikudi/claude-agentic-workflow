name: Template Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly to catch any structural drift
    - cron: '0 0 * * 0'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  structure-validation:
    name: Repository Structure Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run structure validation
        run: |
          python scripts/validation/structure-validator.py --output validation-results.json

      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: structure-validation-results
          path: validation-results.json

      - name: Comment on PR (if validation fails)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let results;
            try {
              results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
            } catch (error) {
              console.log('Could not read validation results');
              return;
            }

            const { summary, results: validationResults } = results;

            let comment = `## üîç Template Structure Validation Failed\n\n`;
            comment += `**Summary**: ${summary.errors} errors, ${summary.warnings} warnings\n\n`;

            if (summary.errors > 0) {
              comment += `### ‚ùå Errors (${summary.errors})\n\n`;
              validationResults
                .filter(r => r.level === 'error')
                .forEach(result => {
                  comment += `- **${result.category}**: ${result.message}\n`;
                  if (result.path) comment += `  - Path: \`${result.path}\`\n`;
                  if (result.suggestion) comment += `  - üí° ${result.suggestion}\n`;
                  comment += `\n`;
                });
            }

            if (summary.warnings > 0) {
              comment += `### ‚ö†Ô∏è Warnings (${summary.warnings})\n\n`;
              validationResults
                .filter(r => r.level === 'warning')
                .slice(0, 5) // Limit to first 5 warnings
                .forEach(result => {
                  comment += `- **${result.category}**: ${result.message}\n`;
                });

              if (summary.warnings > 5) {
                comment += `\n_... and ${summary.warnings - 5} more warnings_\n`;
              }
            }

            comment += `\n---\n`;
            comment += `ü§ñ This comment was automatically generated by the template validation workflow.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  agent-configuration-validation:
    name: Agent Configuration Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate agent configurations
        run: |
          python scripts/validation/validate-agent-configs.py

      - name: Check for required agent files
        run: |
          # Check that all agents have required files
          for agent_dir in subagents/*/; do
            agent_name=$(basename "$agent_dir")
            echo "Checking agent: $agent_name"

            # Check for config.yaml
            if [ ! -f "$agent_dir/config.yaml" ]; then
              echo "‚ùå Missing config.yaml for $agent_name"
              exit 1
            fi

            # Check for prompt.md
            if [ ! -f "$agent_dir/prompt.md" ]; then
              echo "‚ùå Missing prompt.md for $agent_name"
              exit 1
            fi

            # Validate YAML syntax
            python -c "import yaml; yaml.safe_load(open('$agent_dir/config.yaml'))" || {
              echo "‚ùå Invalid YAML in $agent_name/config.yaml"
              exit 1
            }

            echo "‚úÖ $agent_name configuration valid"
          done

  hook-validation:
    name: Hook Scripts Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Check hook script syntax
        run: |
          # Find all Python hook scripts
          find hooks/ -name "*.py" -type f | while read -r script; do
            echo "Checking syntax of $script"
            python -m py_compile "$script" || {
              echo "‚ùå Syntax error in $script"
              exit 1
            }
            echo "‚úÖ $script syntax valid"
          done

      - name: Test hook execution
        run: |
          # Test hooks with sample data
          echo "Testing plan validation hook..."
          python hooks/validation/plan-validation.py '{"test": true}' || {
            echo "‚ùå Plan validation hook failed"
            exit 1
          }

          echo "‚úÖ Hook validation passed"

  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for markdown linting)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdown linting tools
        run: |
          npm install -g markdownlint-cli

      - name: Lint markdown files
        run: |
          # Lint all markdown files
          find . -name "*.md" -not -path "./node_modules/*" | xargs markdownlint --config .markdownlint.json || {
            echo "‚ùå Markdown linting failed"
            echo "Please fix markdown formatting issues"
            exit 1
          }

      - name: Check documentation completeness
        run: |
          # Check for required documentation files
          required_docs=(
            "README.md"
            "docs/getting-started.md"
            "docs/knowledge-base/claude-code-best-practices.md"
            "docs/knowledge-base/coding-standards.md"
            "docs/knowledge-base/testing-guidelines.md"
            "docs/examples/simple-feature-workflow.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "‚ùå Missing required documentation: $doc"
              exit 1
            fi

            # Check if file is not empty (more than 100 bytes)
            if [ $(wc -c < "$doc") -lt 100 ]; then
              echo "‚ùå Documentation file appears empty or minimal: $doc"
              exit 1
            fi

            echo "‚úÖ $doc exists and has content"
          done

  orchestration-script-validation:
    name: Orchestration Scripts Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml asyncio pathlib

      - name: Validate orchestration scripts
        run: |
          # Check syntax of orchestration scripts
          scripts=(
            "scripts/orchestration/workflow-orchestrator.py"
            "scripts/orchestration/claude-code-sdk-client.py"
          )

          for script in "${scripts[@]}"; do
            echo "Checking $script..."

            # Check syntax
            python -m py_compile "$script" || {
              echo "‚ùå Syntax error in $script"
              exit 1
            }

            # Check for required functions/classes
            if [[ "$script" == *"workflow-orchestrator.py" ]]; then
              if ! grep -q "class WorkflowOrchestrator" "$script"; then
                echo "‚ùå Missing WorkflowOrchestrator class in $script"
                exit 1
              fi
            fi

            if [[ "$script" == *"claude-code-sdk-client.py" ]]; then
              if ! grep -q "class ClaudeCodeSDKClient" "$script"; then
                echo "‚ùå Missing ClaudeCodeSDKClient class in $script"
                exit 1
              fi
            fi

            echo "‚úÖ $script validation passed"
          done

  integration-test:
    name: Basic Integration Test
    runs-on: ubuntu-latest
    needs: [structure-validation, agent-configuration-validation]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml asyncio pathlib

      - name: Run basic workflow simulation
        run: |
          # Test the workflow orchestrator with a simple example
          cd scripts/orchestration
          python -c "
          import asyncio
          import sys
          sys.path.append('.')
          from claude_code_sdk_client import ClaudeCodeSDKClient

          async def test():
              client = ClaudeCodeSDKClient()
              agents = client.list_available_agents()
              print(f'Found {len(agents)} agents')

              # Test agent validation
              for agent in agents:
                  validation = await client.validate_agent_config(agent['name'])
                  if not validation['valid']:
                      print(f'‚ùå Agent {agent[\"name\"]} validation failed')
                      return False
                  print(f'‚úÖ Agent {agent[\"name\"]} validated')

              return True

          result = asyncio.run(test())
          if not result:
              exit(1)
          print('üéâ Basic integration test passed')
          "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r scripts/ hooks/ -f json -o bandit-report.json || true

      - name: Check for hardcoded secrets
        run: |
          # Simple check for common secret patterns
          if grep -r -i "password.*=" scripts/ hooks/ --include="*.py" | grep -v "password_hash\|hashed_password"; then
            echo "‚ùå Potential hardcoded passwords found"
            exit 1
          fi

          if grep -r -i "api_key.*=" scripts/ hooks/ --include="*.py"; then
            echo "‚ùå Potential hardcoded API keys found"
            exit 1
          fi

          if grep -r -i "secret.*=" scripts/ hooks/ --include="*.py" | grep -v "secret_key.*=.*env\|jwt_secret"; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          fi

          echo "‚úÖ No obvious hardcoded secrets found"

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: bandit-report.json

  template-completeness:
    name: Template Completeness Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check template completeness
        run: |
          echo "üîç Checking template completeness..."

          # Count agents
          agent_count=$(find subagents/ -mindepth 1 -maxdepth 1 -type d | wc -l)
          echo "üìä Found $agent_count agents"

          if [ "$agent_count" -lt 7 ]; then
            echo "‚ùå Expected at least 7 agents, found $agent_count"
            exit 1
          fi

          # Count hook scripts
          hook_count=$(find hooks/ -name "*.py" -type f | wc -l)
          echo "üìä Found $hook_count hook scripts"

          if [ "$hook_count" -lt 3 ]; then
            echo "‚ùå Expected at least 3 hook scripts, found $hook_count"
            exit 1
          fi

          # Count documentation files
          doc_count=$(find docs/ -name "*.md" -type f | wc -l)
          echo "üìä Found $doc_count documentation files"

          if [ "$doc_count" -lt 5 ]; then
            echo "‚ùå Expected at least 5 documentation files, found $doc_count"
            exit 1
          fi

          # Check for orchestration scripts
          if [ ! -f "scripts/orchestration/workflow-orchestrator.py" ]; then
            echo "‚ùå Missing workflow orchestrator"
            exit 1
          fi

          if [ ! -f "scripts/orchestration/claude-code-sdk-client.py" ]; then
            echo "‚ùå Missing Claude Code SDK client"
            exit 1
          fi

          echo "‚úÖ Template completeness check passed"

  final-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [
      structure-validation,
      agent-configuration-validation,
      hook-validation,
      documentation-validation,
      orchestration-script-validation,
      integration-test,
      security-scan,
      template-completeness
    ]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate final validation report
        run: |
          echo "# üìã Template Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "**Date**: $(date)" >> validation-report.md
          echo "**Commit**: ${{ github.sha }}" >> validation-report.md
          echo "" >> validation-report.md

          # Check job statuses
          echo "## üß™ Test Results" >> validation-report.md
          echo "" >> validation-report.md

          jobs=(
            "structure-validation:${{ needs.structure-validation.result }}"
            "agent-configuration-validation:${{ needs.agent-configuration-validation.result }}"
            "hook-validation:${{ needs.hook-validation.result }}"
            "documentation-validation:${{ needs.documentation-validation.result }}"
            "orchestration-script-validation:${{ needs.orchestration-script-validation.result }}"
            "integration-test:${{ needs.integration-test.result }}"
            "security-scan:${{ needs.security-scan.result }}"
            "template-completeness:${{ needs.template-completeness.result }}"
          )

          for job in "${jobs[@]}"; do
            name=$(echo "$job" | cut -d: -f1)
            status=$(echo "$job" | cut -d: -f2)

            if [ "$status" = "success" ]; then
              echo "- ‚úÖ $name" >> validation-report.md
            elif [ "$status" = "failure" ]; then
              echo "- ‚ùå $name" >> validation-report.md
            elif [ "$status" = "cancelled" ]; then
              echo "- ‚è∏Ô∏è $name (cancelled)" >> validation-report.md
            else
              echo "- ‚ö†Ô∏è $name (skipped)" >> validation-report.md
            fi
          done

          echo "" >> validation-report.md
          echo "## üìä Summary" >> validation-report.md
          echo "" >> validation-report.md

          # Count successes and failures
          success_count=0
          failure_count=0

          for job in "${jobs[@]}"; do
            status=$(echo "$job" | cut -d: -f2)
            if [ "$status" = "success" ]; then
              ((success_count++))
            elif [ "$status" = "failure" ]; then
              ((failure_count++))
            fi
          done

          total_jobs=${#jobs[@]}
          echo "- **Total Jobs**: $total_jobs" >> validation-report.md
          echo "- **Successful**: $success_count" >> validation-report.md
          echo "- **Failed**: $failure_count" >> validation-report.md
          echo "- **Success Rate**: $((success_count * 100 / total_jobs))%" >> validation-report.md
          echo "" >> validation-report.md

          if [ "$failure_count" -eq 0 ]; then
            echo "üéâ **All validations passed!** The template is ready for use." >> validation-report.md
          else
            echo "‚ö†Ô∏è **Some validations failed.** Please review and fix the issues above." >> validation-report.md
          fi

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation-report.md

      - name: Comment validation report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            try {
              const report = fs.readFileSync('validation-report.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } catch (error) {
              console.log('Could not read validation report');
            }